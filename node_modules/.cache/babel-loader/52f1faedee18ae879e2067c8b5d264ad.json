{"ast":null,"code":"var _jsxFileName = \"/Users/isaiahyoon/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nconst winningStyle = {\n  color: 'blue'\n};\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    style: props.isWinning ? winningStyle : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      isWinning: this.props.winningSquares.includes(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }\n    });\n  }\n\n  render() {\n    let board = [];\n\n    for (let row = 0; row < 3; row++) {\n      let squares = [];\n\n      for (let col = 0; col < 3; col++) {\n        let i = row * 3 + col;\n        squares.push( /*#__PURE__*/React.createElement(\"span\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 30\n          }\n        }, this.renderSquare(i)));\n      }\n\n      board.push( /*#__PURE__*/React.createElement(\"div\", {\n        key: row,\n        className: \"board-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 24\n        }\n      }, squares));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 16\n      }\n    }, board);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        moveLocation: null\n      }],\n      xIsNext: true,\n      stepNumber: 0,\n      sortByAscending: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        moveLocation: calculateRowCol(i)\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  toggleSort() {\n    this.setState({\n      sortByAscending: !this.state.sortByAscending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const stepNumber = this.state.stepNumber;\n    const current = history[stepNumber];\n    const winner = calculateWinner(current.squares);\n    const isDraw = isDraw(stepNumber, current.squares);\n    const moves = history.map((step, i) => {\n      const isCurrentStep = i === stepNumber;\n      const desc = i ? 'Go to move ' + i + ': (' + step.moveLocation + ')' : 'Go to game start';\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.jumpTo(i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }\n      }, isCurrentStep ? /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 31\n        }\n      }, desc) : desc));\n    });\n\n    if (!this.state.sortByAscending) {\n      moves.reverse();\n    }\n\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner[0];\n    } else if (isDraw) {\n      status = 'Draw';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    let sortOrder = 'Sort by ' + (this.state.sortByAscending ? 'descending' : 'ascending');\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      winningSquares: winner ? winner[1] : [],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, status), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }, moves), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.toggleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, sortOrder))));\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [x, y, z] = lines[i];\n\n    if (squares[x] && squares[x] === squares[y] && squares[x] === squares[z]) {\n      return [squares[x], lines[i]];\n    }\n  }\n\n  return null;\n}\n\nfunction isDraw(squares, stepNumber) {\n  return stepNumber === 9 && !calculateWinner(squares);\n}\n\nfunction calculateRowCol(i) {\n  const row = Math.floor(i / 3);\n  const col = i % 3;\n  return [row, col];\n}","map":{"version":3,"sources":["/Users/isaiahyoon/my-app/src/index.js"],"names":["React","ReactDOM","winningStyle","color","Square","props","onClick","isWinning","value","Board","Component","renderSquare","i","squares","winningSquares","includes","render","board","row","col","push","Game","constructor","state","history","Array","fill","moveLocation","xIsNext","stepNumber","sortByAscending","handleClick","slice","current","length","calculateWinner","setState","concat","calculateRowCol","jumpTo","step","toggleSort","winner","isDraw","moves","map","isCurrentStep","desc","reverse","status","sortOrder","document","getElementById","lines","x","y","z","Math","floor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst winningStyle = {\n    color: 'blue'\n}\n\nfunction Square(props) {\n\n    return (\n        <button className=\"square\" onClick={props.onClick} style={props.isWinning ? winningStyle : null}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square \n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                isWinning={this.props.winningSquares.includes(i)}\n            />\n        );\n    }\n\n    render() {\n        let board = [];\n        for (let row = 0; row < 3; row++) {\n            let squares = []\n            for (let col = 0; col < 3; col++) {\n                let i = row * 3 + col;\n                squares.push(<span key={i}>{this.renderSquare(i)}</span>);\n            }\n            board.push(<div key={row} className=\"board-row\">{squares}</div>)  \n        }\n\n        return <div>{board}</div>;\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n                moveLocation: null\n            }],\n            xIsNext: true,\n            stepNumber: 0,\n            sortByAscending: true\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                moveLocation: calculateRowCol(i)\n            }]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: step % 2 === 0\n        });\n    }\n\n    toggleSort() {\n        this.setState({\n            sortByAscending: !this.state.sortByAscending\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const stepNumber = this.state.stepNumber;\n        const current = history[stepNumber];\n        const winner = calculateWinner(current.squares);\n        const isDraw = isDraw(stepNumber, current.squares);\n\n        const moves = history.map((step, i) => {\n            const isCurrentStep = i === stepNumber;\n            const desc = i ?\n                'Go to move ' + i + ': (' + step.moveLocation + ')':\n                'Go to game start';\n            return (\n                <li key={i}>\n                    <button onClick={() => this.jumpTo(i)}>\n                        {isCurrentStep\n                            ? <b>{desc}</b>\n                            : desc\n                        }\n                    </button>\n                </li>\n            );\n        });\n        if (!this.state.sortByAscending) {\n            moves.reverse();\n        }\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner[0];\n        } else if (isDraw) {\n            status = 'Draw'\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        let sortOrder = 'Sort by ' + (this.state.sortByAscending ? 'descending' : 'ascending');\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                        winningSquares={winner ? winner[1] : []}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                    <div>\n                        <button onClick={() => this.toggleSort()}>{sortOrder}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [x, y, z] = lines[i];\n        if (squares[x] && squares[x] === squares[y] && squares[x] === squares[z]) {\n            return [squares[x], lines[i]];\n        }\n    }\n    return null;\n}\n\nfunction isDraw(squares, stepNumber) {\n    return stepNumber === 9 && !calculateWinner(squares);\n}\n\nfunction calculateRowCol(i) {\n    const row = Math.floor(i / 3);\n    const col = i % 3;\n    return [row, col];\n}\n"]},"metadata":{},"sourceType":"module"}