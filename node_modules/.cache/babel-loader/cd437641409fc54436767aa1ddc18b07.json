{"ast":null,"code":"var _jsxFileName = \"/Users/isaiahyoon/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }\n    });\n  }\n\n  render() {\n    let board = [];\n\n    for (let i = 0; i < 3; i++) {\n      let squares = [];\n\n      for (let j = 0; j < 3; j++) {\n        squares.push(this.renderSquare(i * 3 + j));\n      }\n\n      board.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: \"board-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 24\n        }\n      }, squares));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 16\n      }\n    }, board);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        moveLocation: null\n      }],\n      xIsNext: true,\n      stepNumber: 0,\n      sortByAscending: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        moveLocation: calculateRowCol(i)\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  toggleSort() {\n    this.setState({\n      sortByAscending: !this.state.sortByAscending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const stepNumber = this.state.stepNumber;\n    const current = history[stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, i) => {\n      const isCurrentStep = i === stepNumber;\n      const desc = i ? 'Go to move ' + i + ': (' + step.moveLocation + ')' : 'Go to game start';\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.jumpTo(i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }\n      }, isCurrentStep ? /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 31\n        }\n      }, desc) : desc));\n    });\n\n    if (!this.state.sortByAscending) {\n      moves.reverse();\n    }\n\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    let sortOrder = 'Sort by ' + (this.state.sortByAscending ? 'descending' : 'ascending');\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, status), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, moves), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.toggleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, sortOrder))));\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [x, y, z] = lines[i];\n\n    if (squares[x] && squares[x] === squares[y] && squares[x] === squares[z]) {\n      return lines[i];\n    }\n  }\n\n  return null;\n}\n\nfunction calculateRowCol(i) {\n  const row = Math.floor(i / 3);\n  const col = i % 3;\n  return [row, col];\n}","map":{"version":3,"sources":["/Users/isaiahyoon/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","board","j","push","Game","constructor","state","history","Array","fill","moveLocation","xIsNext","stepNumber","sortByAscending","handleClick","slice","current","length","calculateWinner","setState","concat","calculateRowCol","jumpTo","step","toggleSort","winner","moves","map","isCurrentStep","desc","reverse","status","sortOrder","document","getElementById","lines","x","y","z","row","Math","floor","col"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square \n                value={this.props.squares[i]} \n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n        let board = [];\n        for (let i = 0; i < 3; i++) {\n            let squares = []\n            for (let j = 0; j < 3; j++) {\n                squares.push(this.renderSquare(i * 3 + j));\n            }\n            board.push(<div className=\"board-row\">{squares}</div>)\n        }\n\n        return <div>{board}</div>;\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n                moveLocation: null\n            }],\n            xIsNext: true,\n            stepNumber: 0,\n            sortByAscending: true\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                moveLocation: calculateRowCol(i)\n            }]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: step % 2 === 0\n        });\n    }\n\n    toggleSort() {\n        this.setState({\n            sortByAscending: !this.state.sortByAscending\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const stepNumber = this.state.stepNumber;\n        const current = history[stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, i) => {\n            const isCurrentStep = i === stepNumber;\n            const desc = i ?\n                'Go to move ' + i + ': (' + step.moveLocation + ')':\n                'Go to game start';\n            return (\n                <li key={i}>\n                    <button onClick={() => this.jumpTo(i)}>\n                        {isCurrentStep\n                            ? <b>{desc}</b>\n                            : desc\n                        }\n                    </button>\n                </li>\n            );\n        });\n        if (!this.state.sortByAscending) {\n            moves.reverse();\n        }\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        let sortOrder = 'Sort by ' + (this.state.sortByAscending ? 'descending' : 'ascending');\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                    <div>\n                        <button onClick={() => this.toggleSort()}>{sortOrder}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [x, y, z] = lines[i];\n        if (squares[x] && squares[x] === squares[y] && squares[x] === squares[z]) {\n            return lines[i];\n        }\n    }\n    return null;\n}\n\nfunction calculateRowCol(i) {\n    const row = Math.floor(i / 3);\n    const col = i % 3;\n    return [row, col];\n}\n"]},"metadata":{},"sourceType":"module"}