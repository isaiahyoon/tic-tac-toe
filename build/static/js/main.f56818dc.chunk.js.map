{"version":3,"sources":["index.js"],"names":["winningStyle","color","Square","props","className","onClick","style","isWinning","value","Board","i","this","squares","winningSquares","includes","board","row","col","push","key","renderSquare","React","Component","Game","state","history","Array","fill","moveLocation","xIsNext","stepNumber","sortByAscending","slice","length","calculateWinner","setState","concat","calculateRowCol","step","status","current","winner","draw","isDraw","moves","map","isCurrentStep","desc","jumpTo","reverse","sortOrder","handleClick","toggleSort","lines","x","y","z","Math","floor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f56818dc.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst winningStyle = {\n    color: 'blue'\n}\n\nfunction Square(props) {\n\n    return (\n        <button className=\"square\" onClick={props.onClick} style={props.isWinning ? winningStyle : null}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square \n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                isWinning={this.props.winningSquares.includes(i)}\n            />\n        );\n    }\n\n    render() {\n        let board = [];\n        for (let row = 0; row < 3; row++) {\n            let squares = []\n            for (let col = 0; col < 3; col++) {\n                let i = row * 3 + col;\n                squares.push(<span key={i}>{this.renderSquare(i)}</span>);\n            }\n            board.push(<div key={row} className=\"board-row\">{squares}</div>)  \n        }\n\n        return <div>{board}</div>;\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n                moveLocation: null\n            }],\n            xIsNext: true,\n            stepNumber: 0,\n            sortByAscending: true\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                moveLocation: calculateRowCol(i)\n            }]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: step % 2 === 0\n        });\n    }\n\n    toggleSort() {\n        this.setState({\n            sortByAscending: !this.state.sortByAscending\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const stepNumber = this.state.stepNumber;\n        const current = history[stepNumber];\n        const winner = calculateWinner(current.squares);\n        const draw = isDraw(current.squares, stepNumber);\n\n        const moves = history.map((step, i) => {\n            const isCurrentStep = i === stepNumber;\n            const desc = i ?\n                'Go to move ' + i + ': (' + step.moveLocation + ')':\n                'Go to game start';\n            return (\n                <li key={i}>\n                    <button onClick={() => this.jumpTo(i)}>\n                        {isCurrentStep\n                            ? <b>{desc}</b>\n                            : desc\n                        }\n                    </button>\n                </li>\n            );\n        });\n        if (!this.state.sortByAscending) {\n            moves.reverse();\n        }\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner[0];\n        } else if (draw) {\n            status = 'Draw'\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        let sortOrder = 'Sort by ' + (this.state.sortByAscending ? 'descending' : 'ascending');\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                        winningSquares={winner ? winner[1] : []}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                    <div>\n                        <button onClick={() => this.toggleSort()}>{sortOrder}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [x, y, z] = lines[i];\n        if (squares[x] && squares[x] === squares[y] && squares[x] === squares[z]) {\n            return [squares[x], lines[i]];\n        }\n    }\n    return null;\n}\n\nfunction isDraw(squares, stepNumber) {\n    return stepNumber === 9 && !calculateWinner(squares);\n}\n\nfunction calculateRowCol(i) {\n    const row = Math.floor(i / 3);\n    const col = i % 3;\n    return [row, col];\n}\n"],"sourceRoot":""}